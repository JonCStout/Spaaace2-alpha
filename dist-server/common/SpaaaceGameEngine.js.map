{"version":3,"sources":["../../src/common/SpaaaceGameEngine.js"],"names":["BASE_MISSILE_STEPS","SpaaaceGameEngine","options","physicsEngine","SimplePhysicsEngine","gameEngine","collisions","type","collisionDistance","serializer","registerClass","Ship","Missile","ShotLengthPowerUp","worldWrap","width","height","on","e","collisionObjects","Object","keys","map","k","ship","find","o","missile","shotLengthPowerUp","playerId","destroyMissile","id","trace","info","emit","missileLifeSteps","console","log","timer","add","shotLengthPowerDown","newX","Math","floor","random","worldSettings","newY","position","set","reduceVisibleThrust","bind","inputData","isServer","playerShip","world","queryObject","instanceType","input","accelerate","showThrust","turnRight","turnLeft","makeMissile","messageIndex","newShipX","newShipY","TwoVector","addObjectToWorld","toString","obj","angle","inputId","copy","velocity","ownerId","x","cos","PI","y","sin","missileId","objects","removeObjectFromWorld","postStepEv","isReenact","ships","queryObjects","forEach","Number","isInteger","GameEngine"],"mappings":"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","sourcesContent":["import { SimplePhysicsEngine, GameEngine, TwoVector } from 'lance-gg';\r\nimport Ship from './Ship';\r\nimport Missile from './Missile';\r\nimport ShotLengthPowerUp from './ShotLengthPowerUp';\r\n\r\nconst BASE_MISSILE_STEPS = 30;  // 30 is original for updateRate 6 in main.js, less for higher\r\n\r\nexport default class SpaaaceGameEngine extends GameEngine {\r\n\r\n    constructor(options) {\r\n        super(options);\r\n        this.physicsEngine = new SimplePhysicsEngine({\r\n            gameEngine: this,\r\n            collisions: {\r\n                type: 'brute',\r\n                collisionDistance: 28\r\n            }\r\n        });\r\n    }\r\n\r\n    registerClasses(serializer){\r\n        serializer.registerClass(Ship);\r\n        serializer.registerClass(Missile);\r\n        serializer.registerClass(ShotLengthPowerUp);\r\n    }\r\n\r\n    initWorld(){\r\n        super.initWorld({\r\n            worldWrap: true,\r\n            width: 3000,\r\n            height: 3000\r\n        });\r\n    }\r\n\r\n    start() {\r\n        super.start();\r\n\r\n        this.on('collisionStart', e => {\r\n            let collisionObjects = Object.keys(e).map(k => e[k]);\r\n            let ship = collisionObjects.find(o => o instanceof Ship);\r\n            let missile = collisionObjects.find(o => o instanceof Missile);\r\n            let shotLengthPowerUp = collisionObjects.find(o => o instanceof ShotLengthPowerUp);\r\n\r\n            // make sure not to process the collision between a missile and the ship that fired it\r\n            if (ship && missile && missile.playerId !== ship.playerId) {\r\n                this.destroyMissile(missile.id);\r\n                this.trace.info(() => `missile by ship=${missile.playerId} hit ship=${ship.id}`);\r\n                this.emit('missileHit', { missile, ship });\r\n                return;  // skip further processing\r\n            }\r\n\r\n            // powerUp collision: ignore non-ship collisions and ships already powered up\r\n            if (ship && shotLengthPowerUp && ship.missileLifeSteps == BASE_MISSILE_STEPS) {\r\n                console.log(`PowerUp!  ${ship} -> ${shotLengthPowerUp}`);\r\n                ship.missileLifeSteps = BASE_MISSILE_STEPS * 3;  // length is 3x longer\r\n                this.timer.add(ship.missileLifeSteps*10, this.shotLengthPowerDown, this, [ship]);  // timer to remove powerup\r\n                let newX = Math.floor(Math.random()*(this.worldSettings.width-200)) + 200;\r\n                let newY = Math.floor(Math.random()*(this.worldSettings.height-200)) + 200;\r\n                // console.log('old vector: ', shotLengthPowerUp.position);\r\n                shotLengthPowerUp.position.set(newX, newY);  // move powerup *** not showing move?\r\n                // console.log('new vector: ', shotLengthPowerUp.position);\r\n                // return;  // skip further processing;  unneeded for last item\r\n            }\r\n        });\r\n\r\n        this.on('postStep', this.reduceVisibleThrust.bind(this));\r\n    }\r\n\r\n    processInput(inputData, playerId, isServer) {\r\n\r\n        super.processInput(inputData, playerId);\r\n\r\n        // get the player ship tied to the player socket\r\n        let playerShip = this.world.queryObject({\r\n            playerId: playerId,\r\n            instanceType: Ship\r\n        });\r\n\r\n        if (playerShip) {\r\n            if (inputData.input == 'up') {\r\n                playerShip.accelerate(0.05);\r\n                playerShip.showThrust = 5; // show thrust for next steps.\r\n            } else if (inputData.input == 'right') {\r\n                playerShip.turnRight(2.5);\r\n            } else if (inputData.input == 'left') {\r\n                playerShip.turnLeft(2.5);\r\n            } else if (inputData.input == 'space') {\r\n                this.makeMissile(playerShip, inputData.messageIndex);\r\n                this.emit('fireMissile');\r\n            }\r\n        }\r\n    }\r\n\r\n    // Makes a new ship, places it randomly and adds it to the game world\r\n    makeShip(playerId) {\r\n        let newShipX = Math.floor(Math.random()*(this.worldSettings.width-200)) + 200;\r\n        let newShipY = Math.floor(Math.random()*(this.worldSettings.height-200)) + 200;\r\n\r\n        let ship = new Ship(this, null, {\r\n            position: new TwoVector(newShipX, newShipY)\r\n        });\r\n\r\n        ship.playerId = playerId;\r\n        ship.missileLifeSteps = BASE_MISSILE_STEPS;\r\n        this.addObjectToWorld(ship);\r\n        console.log(`ship added: ${ship.toString()}`);\r\n\r\n        return ship;\r\n    }\r\n\r\n    makeShotLengthPowerUp() {\r\n        let newX = Math.floor(Math.random()*(this.worldSettings.width-200)) + 200;\r\n        let newY = Math.floor(Math.random()*(this.worldSettings.height-200)) + 200;\r\n\r\n        let obj = new ShotLengthPowerUp(this, null, {\r\n            position: new TwoVector(newX, newY)\r\n        });\r\n        obj.angle = Math.floor(Math.random()*360);\r\n        // obj.rotationSpeed = 1;\r\n        obj.width = 2;\r\n\r\n        // obj.objId = id;  // don't overwrite obj.id!\r\n        this.addObjectToWorld(obj);\r\n        // console.log(`ShotLengthPowerUp added: #${obj.id}`);\r\n\r\n        return obj;\r\n    }\r\n\r\n    // remove powerup effect\r\n    shotLengthPowerDown(ship) {\r\n        if (ship) {\r\n            console.log(`PowerDown for ship: ${ship}`);\r\n            ship.missileLifeSteps = BASE_MISSILE_STEPS;\r\n        } else {\r\n            console.log('Can\\'t powerdown a non-existant ship!');\r\n        }\r\n    }\r\n\r\n\r\n    makeMissile(playerShip, inputId) {\r\n        let missile = new Missile(this);\r\n\r\n        // we want the missile location and velocity to correspond to that of the ship firing it\r\n        missile.position.copy(playerShip.position);\r\n        missile.velocity.copy(playerShip.velocity);\r\n        missile.angle = playerShip.angle;\r\n        missile.playerId = playerShip.playerId;\r\n        missile.ownerId = playerShip.id;\r\n        missile.inputId = inputId; // this enables usage of the missile shadow object\r\n        missile.velocity.x += Math.cos(missile.angle * (Math.PI / 180)) * 10;\r\n        missile.velocity.y += Math.sin(missile.angle * (Math.PI / 180)) * 10;\r\n\r\n        this.trace.trace(() => `missile[${missile.id}] created vel=${missile.velocity}`);\r\n\r\n        let obj = this.addObjectToWorld(missile);\r\n\r\n        // if the object was added successfully to the game world, destroy the missile after some game ticks\r\n        if (obj)\r\n            this.timer.add(playerShip.missileLifeSteps, this.destroyMissile, this, [obj.id]);\r\n\r\n        return missile;\r\n    }\r\n\r\n    // destroy the missile if it still exists\r\n    destroyMissile(missileId) {\r\n        if (this.world.objects[missileId]) {\r\n            this.trace.trace(() => `missile[${missileId}] destroyed`);\r\n            this.removeObjectFromWorld(missileId);\r\n        }\r\n    }\r\n\r\n    // at the end of the step, reduce the thrust for all objects\r\n    reduceVisibleThrust(postStepEv) {\r\n        if (postStepEv.isReenact)\r\n            return;\r\n\r\n        let ships = this.world.queryObjects({\r\n            instanceType: Ship\r\n        });\r\n\r\n        ships.forEach(ship => {\r\n            if (Number.isInteger(ship.showThrust) && ship.showThrust >= 1)\r\n                ship.showThrust--;\r\n        });\r\n    }\r\n}\r\n"],"file":"SpaaaceGameEngine.js"}